apply plugin: 'com.android.application'

project.archivesBaseName = "TTW-wear";

android {
    // Allows you to reference product flavors in your
    // phone module's build.gradle file
    publishNonDefault true

    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        applicationId "org.codechimp.ttw"
        minSdkVersion 23
        targetSdkVersion 28
        versionName project.VERSION_NAME

        ext.env = System.getenv()

        if (env.BUILD_NUMBER != null) {
            versionCode Integer.parseInt("50" + env.BUILD_NUMBER + "2")
            versionCodeSuffix Integer.parseInt("50" + env.BUILD_NUMBER + "0")
        } else {
            versionCode Integer.parseInt(project.VERSION_CODE + 1)
            versionCodeSuffix Integer.parseInt(project.VERSION_CODE)
        }

        versionName project.VERSION_NAME + "." + versionCodeSuffix.toString()
    }

    signingConfigs { release }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

//    android.applicationVariants.all { variant ->
//        variant.outputs.all {
//            outputFileName = "TTW-Wear-${variant.name}-${project.VERSION_NAME}.apk"
//        }
//    }

    lintOptions {
        abortOnError false
        disable 'MissingTranslation'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.google.android.gms:play-services-wearable:$rootProject.ext.playServicesVersion"

    compileOnly 'com.google.android.wearable:wearable:2.4.0'
}

if (signingPropsFile.canRead()) {
    def props = new Properties()
    props.load(signingPropsFile.newReader('UTF-8'))

    if (props.containsKey('STORE_FILE') && props.containsKey('STORE_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}